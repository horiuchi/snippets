# -*- encoding: utf-8 -*-

require 'div_rect'

describe DivRect do

  before :each do
    @divRect = DivRect.new
  end

  it '更新箇所がないケース' do
    input = [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '更新箇所が1マスで端っこ' do
    input = [
      [ 1, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 1, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '更新箇所が1マスで真ん中' do
    input = [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '更新箇所が2マスで端っこ' do
    input = [
      [ 1, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 1 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 1, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 2 ],
    ]
  end

  it '更新箇所が2マスで真ん中' do
    input = [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 0, 1, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 0, 2, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '更新箇所が3マス' do
    input = [
      [ 0, 0, 0, 0, 0, 1 ],
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 0, 1, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 0, 0, 0, 1 ],
      [ 0, 0, 2, 0, 0, 0 ],
      [ 0, 0, 0, 3, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '更新箇所が横つながりの2マス' do
    input = [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '更新箇所が縦つながりの2マス' do
    input = [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '更新箇所がL字1' do
    input = [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 2, 0, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '更新箇所がL字2' do
    input = [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 1, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 0, 1, 0, 0 ],
      [ 0, 0, 2, 2, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '更新箇所がL字3' do
    input = [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 2, 2, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '更新箇所がL字4' do
    input = [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 0, 1, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 0, 2, 0, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '大きい1つの四角形' do
    input = [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 1, 1, 1, 1, 0 ],
      [ 0, 1, 1, 1, 1, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 0, 0, 0, 0 ],
      [ 0, 1, 1, 1, 1, 0 ],
      [ 0, 1, 1, 1, 1, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '全更新' do
    input = [
      [ 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1 ],
    ]
  end

  it '大きい四角形+1マス' do
    input = [
      [ 0, 1, 1, 1, 0, 0 ],
      [ 0, 1, 1, 1, 0, 0 ],
      [ 0, 0, 0, 0, 1, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 1, 1, 1, 0, 0 ],
      [ 0, 1, 1, 1, 0, 0 ],
      [ 0, 0, 0, 0, 2, 0 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '太L字' do
    input = [
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 1, 1, 1, 1 ],
      [ 0, 0, 1, 1, 1, 1 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 2, 2, 2, 2 ],
      [ 0, 0, 2, 2, 2, 2 ],
    ]
  end

  it 'T字' do
    input = [
      [ 1, 1, 1, 1, 1, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 1, 1, 1, 1, 1, 0 ],
      [ 0, 0, 2, 2, 0, 0 ],
      [ 0, 0, 2, 2, 0, 0 ],
      [ 0, 0, 2, 2, 0, 0 ],
    ]
  end

  it '逆T字' do
    input = [
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 1, 1, 1, 1, 1, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 2, 2, 2, 2, 2, 0 ],
    ]
  end

  it '工の字' do
    input = [
      [ 0, 1, 1, 1, 1, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 1, 1, 1, 1, 1, 1 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 1, 1, 1, 1, 0 ],
      [ 0, 0, 2, 2, 0, 0 ],
      [ 0, 0, 2, 2, 0, 0 ],
      [ 3, 3, 3, 3, 3, 3 ],
    ]
  end

  it '工の字を横倒し' do
    input = [
      [ 1, 0, 0, 0, 0, 1 ],
      [ 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1 ],
      [ 1, 0, 0, 0, 0, 1 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 1, 1, 1, 1, 0 ],
      [ 0, 0, 2, 2, 0, 0 ],
      [ 0, 0, 2, 2, 0, 0 ],
      [ 3, 3, 3, 3, 3, 3 ],
    ]
  end

  it '十字' do
    input = [
      [ 0, 0, 0, 1, 0, 0 ],
      [ 0, 1, 1, 1, 1, 1 ],
      [ 0, 0, 0, 1, 0, 0 ],
      [ 0, 0, 0, 1, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 0, 1, 0, 0 ],
      [ 0, 2, 2, 2, 2, 2 ],
      [ 0, 0, 0, 3, 0, 0 ],
      [ 0, 0, 0, 3, 0, 0 ],
    ]
  end

  it '太十字' do
    input = [
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 1, 1, 1, 1, 0 ],
      [ 0, 1, 1, 1, 1, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 2, 2, 2, 2, 0 ],
      [ 0, 2, 2, 2, 2, 0 ],
      [ 0, 0, 3, 3, 0, 0 ],
    ]
  end

  it 'ピラミッド' do
    input = [
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 1, 1, 1, 1, 0 ],
      [ 1, 1, 1, 1, 1, 1 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 1, 0, 0, 0 ],
      [ 0, 0, 2, 2, 0, 0 ],
      [ 0, 3, 3, 3, 3, 0 ],
      [ 4, 4, 4, 4, 4, 4 ],
    ]
  end

  it '逆ピラミッド' do
    input = [
      [ 1, 1, 1, 1, 1, 1 ],
      [ 0, 1, 1, 1, 1, 0 ],
      [ 0, 0, 1, 1, 0, 0 ],
      [ 0, 0, 1, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 1, 1, 1, 1, 1, 1 ],
      [ 0, 2, 2, 2, 2, 0 ],
      [ 0, 0, 3, 3, 0, 0 ],
      [ 0, 0, 4, 0, 0, 0 ],
    ]
  end

  it 'ランダム' do
    input = [
      [ 0, 1, 1, 1, 1, 0 ],
      [ 1, 0, 0, 1, 1, 0 ],
      [ 1, 0, 1, 0, 1, 1 ],
      [ 0, 0, 1, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 1, 1, 1, 1, 0 ],
      [ 2, 0, 0, 3, 3, 0 ],
      [ 2, 0, 4, 0, 5, 5 ],
      [ 0, 0, 4, 0, 0, 0 ],
    ]
  end

  it 'ランダム2' do
    input = [
      [ 0, 0, 1, 0, 1, 1 ],
      [ 1, 1, 1, 0, 1, 0 ],
      [ 0, 1, 0, 1, 1, 1 ],
      [ 1, 0, 1, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 0, 0, 1, 0, 2, 2 ],
      [ 3, 3, 3, 0, 4, 0 ],
      [ 0, 5, 0, 6, 6, 6 ],
      [ 7, 0, 8, 0, 0, 0 ],
    ]
  end

  it 'コの字' do
    input = [
      [ 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 0, 0, 0, 0 ],
      [ 1, 1, 1, 1, 1, 1 ],
      [ 1, 1, 1, 1, 1, 1 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 1, 1, 1, 1, 1, 1 ],
      [ 2, 2, 0, 0, 0, 0 ],
      [ 3, 3, 3, 3, 3, 3 ],
      [ 3, 3, 3, 3, 3, 3 ],
    ]
  end

  it '横縞' do
    input = [
      [ 1, 1, 1, 1, 1, 1 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 1, 1, 1, 1, 1, 1 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 1, 1, 1, 1, 1, 1 ],
      [ 0, 0, 0, 0, 0, 0 ],
      [ 2, 2, 2, 2, 2, 2 ],
      [ 0, 0, 0, 0, 0, 0 ],
    ]
  end

  it '縦縞' do
    input = [
      [ 1, 0, 1, 0, 1, 1 ],
      [ 1, 0, 1, 0, 1, 1 ],
      [ 1, 0, 1, 0, 1, 1 ],
      [ 1, 0, 1, 0, 1, 1 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 1, 0, 2, 0, 3, 3 ],
      [ 1, 0, 2, 0, 3, 3 ],
      [ 1, 0, 2, 0, 3, 3 ],
      [ 1, 0, 2, 0, 3, 3 ],
    ]
  end

  it '枠' do
    input = [
      [ 1, 1, 1, 1, 1, 1 ],
      [ 1, 0, 0, 0, 0, 1 ],
      [ 1, 0, 0, 0, 0, 1 ],
      [ 1, 1, 1, 1, 1, 1 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 1, 1, 1, 1, 1, 1 ],
      [ 2, 0, 0, 0, 0, 3 ],
      [ 2, 0, 0, 0, 0, 3 ],
      [ 4, 4, 4, 4, 4, 4 ],
    ]
  end

  it '牢屋' do
    input = [
      [ 1, 1, 1, 1, 1, 1 ],
      [ 1, 0, 1, 1, 0, 1 ],
      [ 1, 0, 1, 1, 0, 1 ],
      [ 1, 1, 1, 1, 1, 1 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 1, 1, 1, 1, 1, 1 ],
      [ 2, 0, 3, 3, 0, 4 ],
      [ 2, 0, 3, 3, 0, 4 ],
      [ 5, 5, 5, 5, 5, 5 ],
    ]
  end

  it '四角形とL' do
    input = [
      [ 1, 1, 0, 0, 1, 0 ],
      [ 1, 1, 0, 0, 1, 0 ],
      [ 0, 0, 0, 0, 1, 0 ],
      [ 1, 1, 1, 1, 1, 0 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 1, 1, 0, 0, 2, 0 ],
      [ 1, 1, 0, 0, 2, 0 ],
      [ 0, 0, 0, 0, 2, 0 ],
      [ 3, 3, 3, 3, 3, 0 ],
    ]
  end

  it '格子' do
    input = [
      [ 1, 0, 1, 0, 1, 0 ],
      [ 0, 1, 0, 1, 0, 1 ],
      [ 1, 0, 1, 0, 1, 0 ],
      [ 0, 1, 0, 1, 0, 1 ],
    ];
    result = @divRect.divide( input );
    result.should == [
      [ 1, 0, 2, 0, 3, 0 ],
      [ 0, 4, 0, 5, 0, 6 ],
      [ 7, 0, 8, 0, 9, 0 ],
      [ 0, 10, 0, 11, 0, 12 ],
    ]
  end

  it 'empty' do
    input = []
    result = @divRect.divide( input );
    result.should == []
  end

  it 'empty2' do
    input = [[]]
    result = @divRect.divide( input );
    result.should == [[]]
  end

  it 'empty3' do
    input = [[],[]]
    result = @divRect.divide( input );
    result.should == [[],[]]
  end

  it '1セル' do
    input = [[1]]
    result = @divRect.divide( input );
    result.should == [[1]]
  end

  it '2セル' do
    input = [[1,1]]
    result = @divRect.divide( input );
    result.should == [[1,1]]
  end

  it '縦の2セル' do
    input = [[1],[1]]
    result = @divRect.divide( input );
    result.should == [[1],[1]]
  end

end
